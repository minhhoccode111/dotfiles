#!/usr/bin/env bash

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color'
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color'

	# export TERM='tmux-256color' # have to match `default-terminal` in tmux.conf
	# but realize that it breaks the theme of nvim
fi

# # Simplify version of Shell Prompt version compare to the one below
# # Function to display the current Git branch
# prompt_git() {
# 	local branch
# 	branch=$(git symbolic-ref --quiet --short HEAD 2>/dev/null || git rev-parse --short HEAD 2>/dev/null)
# 	[ -n "$branch" ] && echo -e " \033[35m($branch)\033[0m" # Violet for branch
# }
#
# # Set the shell prompt
# PS1="\033[32m\w\033[0m\$(prompt_git)\n\$ " # Green for path, violet for Git, newline, and prompt character
# export PS1

prompt_git() {
	local s=''
	local branchName=''

	# Check if the current directory is in a Git repository.
	git rev-parse --is-inside-work-tree &>/dev/null || return

	# Check for what branch we’re on.
	# Get the short symbolic ref. If HEAD isn’t a symbolic ref, get a
	# tracking remote branch or tag. Otherwise, get the
	# short SHA for the latest commit, or give up.
	branchName="$(git symbolic-ref --quiet --short HEAD 2>/dev/null ||
		git describe --all --exact-match HEAD 2>/dev/null ||
		git rev-parse --short HEAD 2>/dev/null ||
		echo '(unknown)')"

	# Early exit for Chromium & Blink repo, as the dirty check takes too long.
	# Thanks, @paulirish!
	# https://github.com/paulirish/dotfiles/blob/dd33151f/.bash_prompt#L110-L123
	repoUrl="$(git config --get remote.origin.url)"
	if grep -q 'chromium/src.git' <<<"${repoUrl}"; then
		s+='*'
	else
		# Check for uncommitted changes in the index.
		if ! $(git diff --quiet --ignore-submodules --cached); then
			s+='+'
		fi
		# Check for unstaged changes.
		if ! $(git diff-files --quiet --ignore-submodules --); then
			s+='!'
		fi
		# Check for untracked files.
		if [ -n "$(git ls-files --others --exclude-standard)" ]; then
			s+='?'
		fi
		# Check for stashed files.
		if $(git rev-parse --verify refs/stash &>/dev/null); then
			s+='$'
		fi
	fi

	[ -n "${s}" ] && s=" [${s}]"

	echo -e "${1}${branchName}${2}${s}"
}

# Function to calculate padding for time alignment
prompt_time() {
	local time_str=$(date +"%H:%M:%S")

	# Get the full git info including status indicators
	local git_info=""
	if git rev-parse --is-inside-work-tree &>/dev/null; then
		git_info=$(prompt_git "" "")
	fi

	# Build the prompt info string exactly as it appears
	local prompt_info="$USER in $(pwd | sed "s|$HOME|~|")"
	if [ -n "$git_info" ]; then
		prompt_info="$prompt_info on $git_info"
	fi

	local info_length=${#prompt_info}
	local time_length=${#time_str}
	local total_width=$(tput cols)
	# NOTE: turn of if we need time at the end of the line
	# local padding=$((total_width - info_length - time_length))
	local padding=0

	if [ $padding -gt 0 ]; then
		printf "%*s%s" $padding "" "$time_str"
	else
		echo " $time_str"
	fi
}

if tput setaf 1 &>/dev/null; then
	tput sgr0 # reset colors
	bold=$(tput bold)
	reset=$(tput sgr0)
	# Solarized colors, taken from http://git.io/solarized-colors.
	black=$(tput setaf 0)
	blue=$(tput setaf 33)
	cyan=$(tput setaf 37)
	green=$(tput setaf 64)
	orange=$(tput setaf 166)
	purple=$(tput setaf 125)
	red=$(tput setaf 124)
	violet=$(tput setaf 61)
	white=$(tput setaf 15)
	yellow=$(tput setaf 136)
else
	bold=''
	reset="\e[0m"
	black="\e[1;30m"
	blue="\e[1;34m"
	cyan="\e[1;36m"
	green="\e[1;32m"
	orange="\e[1;33m"
	purple="\e[1;35m"
	red="\e[1;31m"
	violet="\e[1;35m"
	white="\e[1;37m"
	yellow="\e[1;33m"
fi

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}"
else
	userStyle="${orange}"
fi

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}"
else
	hostStyle="${yellow}"
fi

# Set the terminal title and prompt.
PS1="\[\033]0;\W\007\]" # working directory base name
# PS1+="\[${bold}\]\n"      # newline
PS1+="\[${userStyle}\]\u" # username
# PS1+="\[${white}\] at " # duplicated
# PS1+="\[${hostStyle}\]\h" # host
PS1+="\[${white}\] in "
PS1+="\[${green}\]\w"                                                   # working directory full path
PS1+="\$(prompt_git \"\[${white}\] on \[${violet}\]\" \"\[${blue}\]\")" # Git repository details
PS1+="\[${white}\] at"
PS1+="\[${cyan}\]\$(prompt_time)"
PS1+="\n"
PS1+="\[${white}\]\$ \[${reset}\]" # `$` (and reset color)
export PS1

PS2="\[${yellow}\]→ \[${reset}\]"
export PS2
