#!/usr/bin/env bash
# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

run-ssh-agent() {
	if [ -z "$SSH_AGENT_PID" ] || ! kill -0 "$SSH_AGENT_PID" 2>/dev/null; then
		printf "\n${BLUE}Starting new ssh-agent...${NC}\n"
		eval "$(ssh-agent -s)" >/dev/null
		printf "\n${GREEN}ssh-agent started successfully with PID: %s${NC}\n" "$SSH_AGENT_PID"
	else
		printf "\n${GREEN}ssh-agent is already running with PID: %s${NC}\n" "$SSH_AGENT_PID"
	fi
}

use-my-ssh() {
	run-ssh-agent
	printf "\n${BLUE}Configuring personal GitHub credentials...${NC}\n"
	ssh-add -D
	ssh-add ~/.ssh/id_ed25519
	git config --global user.name minhhoccode111
	git config --global user.email minhhoccode111@gmail.com
}

use-hisoft-ssh() {
	run-ssh-agent
	printf "\n${BLUE}Configuring Hisoft credentials...${NC}\n"
	ssh-add -D
	ssh-add ~/.ssh/id_ed25519_hisoft
	git config --global user.name minhdh-hisoft
	git config --global user.email minhdh@hisoft.vn
}

fetch-dir() {
	local dir="$1"
	cd "$dir" || {
		printf "${RED}Failed to change to directory: %s${NC}\n" "$dir"
		return 1
	}
	printf "\n${BLUE}Scanning repositories in: %s${NC}\n" "$dir"
	# Export colors so they're available in the subshell
	export RED GREEN YELLOW BLUE NC
	find . -maxdepth 2 -type d -name ".git" -exec sh -c '
        repo_path="$(dirname "{}")"
        repo_name="$(basename "$repo_path")"
        abs_path="$PWD${repo_path#.}"

        printf "\n${BLUE}Fetching: %s${NC}\n" "$repo_name"

        cd "$repo_path" || exit

        if ! git diff-index --quiet HEAD --; then
            printf "${YELLOW}! Uncommitted changes present${NC}\n"
            printf "${YELLOW}→ Run: cd %s && git commit -am \".\"${NC}\n" "$abs_path"
        fi

        if [ -n "$(git ls-files --others --exclude-standard)" ]; then
            printf "${YELLOW}! Untracked files present${NC}\n"
            printf "${YELLOW}→ Run: cd %s && git push${NC}\n" "$abs_path"
        fi

        fetch_output=$(git fetch --prune 2>&1)
        current_branch=$(git branch --show-current)
        git_status=$(git status -uno)

	unpushed=$(git log @{u}.. --oneline 2>/dev/null)
        if [ -n "$unpushed" ]; then
            commit_count=$(echo "$unpushed" | wc -l)
            printf "${YELLOW}! %d commit(s) not pushed to remote${NC}\n" "$commit_count"
            printf "${YELLOW}→ Run: cd %s && git push${NC}\n" "$abs_path"
        fi

        behind_count=$(echo "$git_status" | grep -o "Your branch is behind.*by [0-9]* commit" | grep -o "[0-9]*")

        if echo "$fetch_output" | grep -q "Repository not found\|Could not read from remote repository"; then
            printf "${RED}✗ Access Error${NC}\n"
        elif [ -n "$behind_count" ]; then
            printf "${YELLOW}→ Branch '\''%s'\'' is behind by %s commits${NC}\n" "$current_branch" "$behind_count"
            printf "${YELLOW}→ Run: cd %s && git pull${NC}\n" "$abs_path"
        else
            printf "${GREEN}✓ Up to date${NC}\n"
        fi
    ' \;
	printf "\n${GREEN}Finished checking repositories in: %s${NC}\n" "$dir"
}

fetch-chore() {
	use-my-ssh
	printf "\n${BLUE}Fetching chore repositories...${NC}\n"
	cdf && fetch-dir "$(pwd)" # dotfiles dir
	cdv && fetch-dir "$(pwd)" # nvim dir
	cdl && fetch-dir "$(pwd)" # learn dir
}

fetch-exercism() {
	use-my-ssh
	printf "\n${BLUE}Fetching exercism repositories...${NC}\n"
	fetch-dir ~/exercism
}

fetch-project() {
	use-my-ssh
	printf "\n${BLUE}Fetching project repositories...${NC}\n"
	fetch-dir ~/project
}

fetch-work() {
	use-hisoft-ssh
	printf "\n${BLUE}Fetching work repositories...${NC}\n"
	fetch-dir ~/work
}

fetch-all() {
	printf "${BLUE}Starting repository fetch for all accounts...${NC}\n"
	fetch-chore
	fetch-exercism
	fetch-project
	fetch-work
	printf "\n${GREEN}All repositories checked!${NC}\n"
	cd ~/ || exit
}

# Helper functions for cloning
gcl() {
	printf "${BLUE}Cloning personal repository: %s${NC}\n" "$1"
	git clone "git@github.com:minhhoccode111/$1.git" "$2"
}

gclh() {
	printf "${BLUE}Cloning Hisoft repository: %s${NC}\n" "$1"
	git clone "git@hisoft.github.com:HisoftVN/$1.git" "$2"
}
